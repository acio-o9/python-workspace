# -*- coding: utf-8 -*-
"""TitanicSurviverPredict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18XnKwoJOB9KTOZ3MX5HKvkqQqSgBbUqI
"""

import pandas as pd
import numpy as np
FIXED_RESULT = 1 # use random_state for fixed result

train_data = pd.read_csv('drive/My Drive/train_data/titanic_train.csv')
train_data.head()

train_data.isnull().sum()

# preprocessing
sex_mapping = {'male': 1, 'female': 0}
train_data['Sex'] = train_data['Sex'].map(sex_mapping)
train_data.head()

# guess Age by Sex and Pclass for no Age 
guess_ages = np.zeros((2,3))

for i in range(0, 2):
    for j in range(0, 3):
        guess_df = train_data[(train_data['Sex'] == i) & (train_data['Pclass'] == j+1)]['Age'].dropna()
        age_guess = guess_df.median()
        guess_ages[i, j] = int( age_guess/0.5 + 0.5 ) * 0.5

for i in range(0, 2):
    for j in range(0, 3):
        # fill guess_ages
        train_data.loc[ (train_data.Age.isnull()) & (train_data.Sex == i) & (train_data.Pclass == j+1), 'Age'] = guess_ages[i, j]

train_data['Age'] = train_data['Age'].astype(int)
train_data.head()

train_data['AgeBand'] = pd.cut(train_data['Age'], 5)
train_data[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)

train_data.loc[ train_data['Age'] <= 16, 'Age'] = 0
train_data.loc[ (train_data['Age'] > 16) & (train_data['Age'] <= 32), 'Age'] = 1
train_data.loc[ (train_data['Age'] > 32) & (train_data['Age'] <= 48), 'Age'] = 2
train_data.loc[ (train_data['Age'] > 48) & (train_data['Age'] <= 64), 'Age'] = 3
train_data.loc[ train_data['Age'] > 64, 'Age']
train_data.head()

feature_label = [
                 'Pclass',
                 'Sex',
                 'Age',
]
X = pd.DataFrame(train_data[feature_label])
y = pd.DataFrame(train_data.iloc[:, 1]) # Survived
print(X.shape)
print(y.shape)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=FIXED_RESULT)
print(X_train.shape)
print(X_test.shape)

# modeling
from sklearn.linear_model import LogisticRegression
model = LogisticRegression(random_state=FIXED_RESULT)
model.fit(X_train, y_train)

# prediction
print(model.score(X_test, y_test))